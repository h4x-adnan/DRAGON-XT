
import os
import base64
from Crypto.Cipher import AES, ChaCha20
from Crypto.Util.Padding import unpad

# ðŸ”¥ Load keys function
def load_key(file_name):
    try:
        with open(file_name, "rb") as f:
            return f.read()
    except FileNotFoundError:
        print(f"ðŸ”´ Missing key file: {file_name}")
        exit()

# ðŸ”¥ Load secret keys
aes_key = load_key("aes.key")
chacha_key = load_key("chacha.key")
chacha_nonce = load_key("chacha_nonce.key")
xor_key = load_key("xor.key")

# ðŸ”¥ Encrypted script
encoded_code = ""

try:
    # ðŸ”¥ Decode from Base64
    aes_encrypted = base64.b64decode(encoded_code)

    # ðŸ”¥ AES-256 decryption
    aes_cipher = AES.new(aes_key, AES.MODE_CBC, iv=b"0123456789abcdef")
    chacha_encrypted = unpad(aes_cipher.decrypt(aes_encrypted), AES.block_size)

    # ðŸ”¥ ChaCha20 decryption (Use saved nonce)
    chacha_cipher = ChaCha20.new(key=chacha_key, nonce=chacha_nonce)
    xor_encrypted = chacha_cipher.decrypt(chacha_encrypted)

    # ðŸ”¥ XOR decryption
    decrypted_code = bytes([b ^ xor_key[i % len(xor_key)] for i, b in enumerate(xor_encrypted)]).decode()

    # ðŸ”¥ Execute script
    exec(decrypted_code)

except Exception as e:
    print(f"ðŸ”´ Decryption failed: {e}")
    exit()
